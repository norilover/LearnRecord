package java.util;

import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Map.Entry;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import jdk.internal.access.SharedSecrets;

public class HashMap<K, V> extends AbstractMap<K, V> implements Map<K, V>, Cloneable, Serializable {
    private static final long serialVersionUID = 362498820763181265L;
    static final int DEFAULT_INITIAL_CAPACITY = 16;
    static final int MAXIMUM_CAPACITY = 1073741824;
    static final float DEFAULT_LOAD_FACTOR = 0.75F;
    static final int TREEIFY_THRESHOLD = 8;
    static final int UNTREEIFY_THRESHOLD = 6;
    static final int MIN_TREEIFY_CAPACITY = 64;
    transient HashMap.Node<K, V>[] table;
    transient Set<Entry<K, V>> entrySet;
    transient int size;
    transient int modCount;
    int threshold;
    final float loadFactor;

    static final int hash(Object key) {
        int h;
        return key == null ? 0 : (h = key.hashCode()) ^ h >>> 16;
    }

    static Class<?> comparableClassFor(Object x) {
        if (x instanceof Comparable) {
            Class c;
            if ((c = x.getClass()) == String.class) {
                return c;
            }

            Type[] ts;
            if ((ts = c.getGenericInterfaces()) != null) {
                Type[] var5 = ts;
                int var6 = ts.length;

                for(int var7 = 0; var7 < var6; ++var7) {
                    Type t = var5[var7];
                    Type[] as;
                    ParameterizedType p;
                    if (t instanceof ParameterizedType && (p = (ParameterizedType)t).getRawType() == Comparable.class && (as = p.getActualTypeArguments()) != null && as.length == 1 && as[0] == c) {
                        return c;
                    }
                }
            }
        }

        return null;
    }

    static int compareComparables(Class<?> kc, Object k, Object x) {
        return x != null && x.getClass() == kc ? ((Comparable)k).compareTo(x) : 0;
    }

    static final int tableSizeFor(int cap) {
        int n = -1 >>> Integer.numberOfLeadingZeros(cap - 1);
        return n < 0 ? 1 : (n >= 1073741824 ? 1073741824 : n + 1);
    }

    public HashMap(int initialCapacity, float loadFactor) {
        if (initialCapacity < 0) {
            throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);
        } else {
            if (initialCapacity > 1073741824) {
                initialCapacity = 1073741824;
            }

            if (!(loadFactor <= 0.0F) && !Float.isNaN(loadFactor)) {
                this.loadFactor = loadFactor;
                this.threshold = tableSizeFor(initialCapacity);
            } else {
                throw new IllegalArgumentException("Illegal load factor: " + loadFactor);
            }
        }
    }

    public HashMap(int initialCapacity) {
        this(initialCapacity, 0.75F);
    }

    public HashMap() {
        this.loadFactor = 0.75F;
    }

    public HashMap(Map<? extends K, ? extends V> m) {
        this.loadFactor = 0.75F;
        this.putMapEntries(m, false);
    }

    final void putMapEntries(Map<? extends K, ? extends V> m, boolean evict) {
        int s = m.size();
        if (s > 0) {
            if (this.table == null) {
                float ft = (float)s / this.loadFactor + 1.0F;
                int t = ft < 1.07374182E9F ? (int)ft : 1073741824;
                if (t > this.threshold) {
                    this.threshold = tableSizeFor(t);
                }
            } else {
                while(s > this.threshold && this.table.length < 1073741824) {
                    this.resize();
                }
            }

            Iterator var8 = m.entrySet().iterator();

            while(var8.hasNext()) {
                Entry<? extends K, ? extends V> e = (Entry)var8.next();
                K key = e.getKey();
                V value = e.getValue();
                this.putVal(hash(key), key, value, false, evict);
            }
        }

    }

    public int size() {
        return this.size;
    }

    public boolean isEmpty() {
        return this.size == 0;
    }

    public V get(Object key) {
        HashMap.Node e;
        return (e = this.getNode(key)) == null ? null : e.value;
    }

    final HashMap.Node<K, V> getNode(Object key) {
        HashMap.Node[] tab;
        HashMap.Node first;
        int n;
        int hash;
        if ((tab = this.table) != null && (n = tab.length) > 0 && (first = tab[n - 1 & (hash = hash(key))]) != null) {
            Object k;
            if (first.hash == hash && ((k = first.key) == key || key != null && key.equals(k))) {
                return first;
            }

            HashMap.Node e;
            if ((e = first.next) != null) {
                if (first instanceof HashMap.TreeNode) {
                    return ((HashMap.TreeNode)first).getTreeNode(hash, key);
                }

                do {
                    if (e.hash == hash && ((k = e.key) == key || key != null && key.equals(k))) {
                        return e;
                    }
                } while((e = e.next) != null);
            }
        }

        return null;
    }

    public boolean containsKey(Object key) {
        return this.getNode(key) != null;
    }

    public V put(K key, V value) {
        return this.putVal(hash(key), key, value, false, true);
    }

    final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) {
        HashMap.Node[] tab;
        int n;
        if ((tab = this.table) == null || (n = tab.length) == 0) {
            n = (tab = this.resize()).length;
        }

        Object p;
        int i;
        if ((p = tab[i = n - 1 & hash]) == null) {
            tab[i] = this.newNode(hash, key, value, (HashMap.Node)null);
        } else {
            Object e;
            Object k;
            if (((HashMap.Node)p).hash == hash && ((k = ((HashMap.Node)p).key) == key || key != null && key.equals(k))) {
                e = p;
            } else if (p instanceof HashMap.TreeNode) {
                e = ((HashMap.TreeNode)p).putTreeVal(this, tab, hash, key, value);
            } else {
                int binCount = 0;

                while(true) {
                    if ((e = ((HashMap.Node)p).next) == null) {
                        ((HashMap.Node)p).next = this.newNode(hash, key, value, (HashMap.Node)null);
                        if (binCount >= 7) {
                            this.treeifyBin(tab, hash);
                        }
                        break;
                    }

                    if (((HashMap.Node)e).hash == hash && ((k = ((HashMap.Node)e).key) == key || key != null && key.equals(k))) {
                        break;
                    }

                    p = e;
                    ++binCount;
                }
            }

            if (e != null) {
                V oldValue = ((HashMap.Node)e).value;
                if (!onlyIfAbsent || oldValue == null) {
                    ((HashMap.Node)e).value = value;
                }

                this.afterNodeAccess((HashMap.Node)e);
                return oldValue;
            }
        }

        ++this.modCount;
        if (++this.size > this.threshold) {
            this.resize();
        }

        this.afterNodeInsertion(evict);
        return null;
    }

    final HashMap.Node<K, V>[] resize() {
        HashMap.Node<K, V>[] oldTab = this.table;
        int oldCap = oldTab == null ? 0 : oldTab.length;
        int oldThr = this.threshold;
        int newThr = 0;
        int newCap;
        if (oldCap > 0) {
            if (oldCap >= 1073741824) {
                this.threshold = 2147483647;
                return oldTab;
            }

            if ((newCap = oldCap << 1) < 1073741824 && oldCap >= 16) {
                newThr = oldThr << 1;
            }
        } else if (oldThr > 0) {
            newCap = oldThr;
        } else {
            newCap = 16;
            newThr = 12;
        }

        if (newThr == 0) {
            float ft = (float)newCap * this.loadFactor;
            newThr = newCap < 1073741824 && ft < 1.07374182E9F ? (int)ft : 2147483647;
        }

        this.threshold = newThr;
        HashMap.Node<K, V>[] newTab = new HashMap.Node[newCap];
        this.table = newTab;
        if (oldTab != null) {
            for(int j = 0; j < oldCap; ++j) {
                HashMap.Node e;
                if ((e = oldTab[j]) != null) {
                    oldTab[j] = null;
                    if (e.next == null) {
                        newTab[e.hash & newCap - 1] = e;
                    } else if (e instanceof HashMap.TreeNode) {
                        ((HashMap.TreeNode)e).split(this, newTab, j, oldCap);
                    } else {
                        HashMap.Node<K, V> loHead = null;
                        HashMap.Node<K, V> loTail = null;
                        HashMap.Node<K, V> hiHead = null;
                        HashMap.Node hiTail = null;

                        HashMap.Node next;
                        do {
                            next = e.next;
                            if ((e.hash & oldCap) == 0) {
                                if (loTail == null) {
                                    loHead = e;
                                } else {
                                    loTail.next = e;
                                }

                                loTail = e;
                            } else {
                                if (hiTail == null) {
                                    hiHead = e;
                                } else {
                                    hiTail.next = e;
                                }

                                hiTail = e;
                            }

                            e = next;
                        } while(next != null);

                        if (loTail != null) {
                            loTail.next = null;
                            newTab[j] = loHead;
                        }

                        if (hiTail != null) {
                            hiTail.next = null;
                            newTab[j + oldCap] = hiHead;
                        }
                    }
                }
            }
        }

        return newTab;
    }

    final void treeifyBin(HashMap.Node<K, V>[] tab, int hash) {
        int n;
        if (tab != null && (n = tab.length) >= 64) {
            int index;
            HashMap.Node e;
            if ((e = tab[index = n - 1 & hash]) != null) {
                HashMap.TreeNode<K, V> hd = null;
                HashMap.TreeNode tl = null;

                do {
                    HashMap.TreeNode<K, V> p = this.replacementTreeNode(e, (HashMap.Node)null);
                    if (tl == null) {
                        hd = p;
                    } else {
                        p.prev = tl;
                        tl.next = p;
                    }

                    tl = p;
                } while((e = e.next) != null);

                if ((tab[index] = hd) != null) {
                    hd.treeify(tab);
                }
            }
        } else {
            this.resize();
        }

    }

    public void putAll(Map<? extends K, ? extends V> m) {
        this.putMapEntries(m, true);
    }

    public V remove(Object key) {
        HashMap.Node e;
        return (e = this.removeNode(hash(key), key, (Object)null, false, true)) == null ? null : e.value;
    }

    final HashMap.Node<K, V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) {
        HashMap.Node[] tab;
        HashMap.Node p;
        int n;
        int index;
        if ((tab = this.table) != null && (n = tab.length) > 0 && (p = tab[index = n - 1 & hash]) != null) {
            HashMap.Node<K, V> node = null;
            Object k;
            if (p.hash == hash && ((k = p.key) == key || key != null && key.equals(k))) {
                node = p;
            } else {
                HashMap.Node e;
                if ((e = p.next) != null) {
                    if (p instanceof HashMap.TreeNode) {
                        node = ((HashMap.TreeNode)p).getTreeNode(hash, key);
                    } else {
                        label88: {
                            while(e.hash != hash || (k = e.key) != key && (key == null || !key.equals(k))) {
                                p = e;
                                if ((e = e.next) == null) {
                                    break label88;
                                }
                            }

                            node = e;
                        }
                    }
                }
            }

            Object v;
            if (node != null && (!matchValue || (v = ((HashMap.Node)node).value) == value || value != null && value.equals(v))) {
                if (node instanceof HashMap.TreeNode) {
                    ((HashMap.TreeNode)node).removeTreeNode(this, tab, movable);
                } else if (node == p) {
                    tab[index] = ((HashMap.Node)node).next;
                } else {
                    p.next = ((HashMap.Node)node).next;
                }

                ++this.modCount;
                --this.size;
                this.afterNodeRemoval((HashMap.Node)node);
                return (HashMap.Node)node;
            }
        }

        return null;
    }

    public void clear() {
        ++this.modCount;
        HashMap.Node[] tab;
        if ((tab = this.table) != null && this.size > 0) {
            this.size = 0;

            for(int i = 0; i < tab.length; ++i) {
                tab[i] = null;
            }
        }

    }

    public boolean containsValue(Object value) {
        HashMap.Node[] tab;
        if ((tab = this.table) != null && this.size > 0) {
            HashMap.Node[] var4 = tab;
            int var5 = tab.length;

            for(int var6 = 0; var6 < var5; ++var6) {
                for(HashMap.Node e = var4[var6]; e != null; e = e.next) {
                    Object v;
                    if ((v = e.value) == value || value != null && value.equals(v)) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    public Set<K> keySet() {
        Set<K> ks = this.keySet;
        if (ks == null) {
            ks = new HashMap.KeySet();
            this.keySet = (Set)ks;
        }

        return (Set)ks;
    }

    final <T> T[] prepareArray(T[] a) {
        int size = this.size;
        if (a.length < size) {
            return (Object[])Array.newInstance(a.getClass().getComponentType(), size);
        } else {
            if (a.length > size) {
                a[size] = null;
            }

            return a;
        }
    }

    <T> T[] keysToArray(T[] a) {
        Object[] r = a;
        int idx = 0;
        HashMap.Node[] tab;
        if (this.size > 0 && (tab = this.table) != null) {
            HashMap.Node[] var5 = tab;
            int var6 = tab.length;

            for(int var7 = 0; var7 < var6; ++var7) {
                for(HashMap.Node e = var5[var7]; e != null; e = e.next) {
                    r[idx++] = e.key;
                }
            }
        }

        return a;
    }

    <T> T[] valuesToArray(T[] a) {
        Object[] r = a;
        int idx = 0;
        HashMap.Node[] tab;
        if (this.size > 0 && (tab = this.table) != null) {
            HashMap.Node[] var5 = tab;
            int var6 = tab.length;

            for(int var7 = 0; var7 < var6; ++var7) {
                for(HashMap.Node e = var5[var7]; e != null; e = e.next) {
                    r[idx++] = e.value;
                }
            }
        }

        return a;
    }

    public Collection<V> values() {
        Collection<V> vs = this.values;
        if (vs == null) {
            vs = new HashMap.Values();
            this.values = (Collection)vs;
        }

        return (Collection)vs;
    }

    public Set<Entry<K, V>> entrySet() {
        Set es;
        return (es = this.entrySet) == null ? (this.entrySet = new HashMap.EntrySet()) : es;
    }

    public V getOrDefault(Object key, V defaultValue) {
        HashMap.Node e;
        return (e = this.getNode(key)) == null ? defaultValue : e.value;
    }

    public V putIfAbsent(K key, V value) {
        return this.putVal(hash(key), key, value, true, true);
    }

    public boolean remove(Object key, Object value) {
        return this.removeNode(hash(key), key, value, true, true) != null;
    }

    public boolean replace(K key, V oldValue, V newValue) {
        HashMap.Node e;
        Object v;
        if ((e = this.getNode(key)) == null || (v = e.value) != oldValue && (v == null || !v.equals(oldValue))) {
            return false;
        } else {
            e.value = newValue;
            this.afterNodeAccess(e);
            return true;
        }
    }

    public V replace(K key, V value) {
        HashMap.Node e;
        if ((e = this.getNode(key)) != null) {
            V oldValue = e.value;
            e.value = value;
            this.afterNodeAccess(e);
            return oldValue;
        } else {
            return null;
        }
    }

    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {
        if (mappingFunction == null) {
            throw new NullPointerException();
        } else {
            int hash = hash(key);
            int binCount = 0;
            HashMap.TreeNode<K, V> t = null;
            HashMap.Node<K, V> old = null;
            HashMap.Node[] tab;
            int n;
            if (this.size > this.threshold || (tab = this.table) == null || (n = tab.length) == 0) {
                n = (tab = this.resize()).length;
            }

            HashMap.Node first;
            int i;
            Object v;
            if ((first = tab[i = n - 1 & hash]) != null) {
                if (first instanceof HashMap.TreeNode) {
                    old = (t = (HashMap.TreeNode)first).getTreeNode(hash, key);
                } else {
                    label73: {
                        HashMap.Node e = first;

                        while(e.hash != hash || (v = e.key) != key && (key == null || !key.equals(v))) {
                            ++binCount;
                            if ((e = e.next) == null) {
                                break label73;
                            }
                        }

                        old = e;
                    }
                }

                Object oldValue;
                if (old != null && (oldValue = ((HashMap.Node)old).value) != null) {
                    this.afterNodeAccess((HashMap.Node)old);
                    return oldValue;
                }
            }

            int mc = this.modCount;
            v = mappingFunction.apply(key);
            if (mc != this.modCount) {
                throw new ConcurrentModificationException();
            } else if (v == null) {
                return null;
            } else if (old != null) {
                ((HashMap.Node)old).value = v;
                this.afterNodeAccess((HashMap.Node)old);
                return v;
            } else {
                if (t != null) {
                    t.putTreeVal(this, tab, hash, key, v);
                } else {
                    tab[i] = this.newNode(hash, key, v, first);
                    if (binCount >= 7) {
                        this.treeifyBin(tab, hash);
                    }
                }

                this.modCount = mc + 1;
                ++this.size;
                this.afterNodeInsertion(true);
                return v;
            }
        }
    }

    public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
        if (remappingFunction == null) {
            throw new NullPointerException();
        } else {
            HashMap.Node e;
            Object oldValue;
            if ((e = this.getNode(key)) != null && (oldValue = e.value) != null) {
                int mc = this.modCount;
                V v = remappingFunction.apply(key, oldValue);
                if (mc != this.modCount) {
                    throw new ConcurrentModificationException();
                }

                if (v != null) {
                    e.value = v;
                    this.afterNodeAccess(e);
                    return v;
                }

                int hash = hash(key);
                this.removeNode(hash, key, (Object)null, false, true);
            }

            return null;
        }
    }

    public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
        if (remappingFunction == null) {
            throw new NullPointerException();
        } else {
            int hash = hash(key);
            int binCount = 0;
            HashMap.TreeNode<K, V> t = null;
            HashMap.Node<K, V> old = null;
            HashMap.Node[] tab;
            int n;
            if (this.size > this.threshold || (tab = this.table) == null || (n = tab.length) == 0) {
                n = (tab = this.resize()).length;
            }

            HashMap.Node first;
            int i;
            if ((first = tab[i = n - 1 & hash]) != null) {
                if (first instanceof HashMap.TreeNode) {
                    old = (t = (HashMap.TreeNode)first).getTreeNode(hash, key);
                } else {
                    label71: {
                        HashMap.Node e = first;

                        Object k;
                        while(e.hash != hash || (k = e.key) != key && (key == null || !key.equals(k))) {
                            ++binCount;
                            if ((e = e.next) == null) {
                                break label71;
                            }
                        }

                        old = e;
                    }
                }
            }

            V oldValue = old == null ? null : ((HashMap.Node)old).value;
            int mc = this.modCount;
            V v = remappingFunction.apply(key, oldValue);
            if (mc != this.modCount) {
                throw new ConcurrentModificationException();
            } else {
                if (old != null) {
                    if (v != null) {
                        ((HashMap.Node)old).value = v;
                        this.afterNodeAccess((HashMap.Node)old);
                    } else {
                        this.removeNode(hash, key, (Object)null, false, true);
                    }
                } else if (v != null) {
                    if (t != null) {
                        t.putTreeVal(this, tab, hash, key, v);
                    } else {
                        tab[i] = this.newNode(hash, key, v, first);
                        if (binCount >= 7) {
                            this.treeifyBin(tab, hash);
                        }
                    }

                    this.modCount = mc + 1;
                    ++this.size;
                    this.afterNodeInsertion(true);
                }

                return v;
            }
        }
    }

    public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
        if (value != null && remappingFunction != null) {
            int hash = hash(key);
            int binCount = 0;
            HashMap.TreeNode<K, V> t = null;
            HashMap.Node<K, V> old = null;
            HashMap.Node[] tab;
            int n;
            if (this.size > this.threshold || (tab = this.table) == null || (n = tab.length) == 0) {
                n = (tab = this.resize()).length;
            }

            HashMap.Node first;
            int i;
            if ((first = tab[i = n - 1 & hash]) != null) {
                if (first instanceof HashMap.TreeNode) {
                    old = (t = (HashMap.TreeNode)first).getTreeNode(hash, key);
                } else {
                    label71: {
                        HashMap.Node e = first;

                        Object k;
                        while(e.hash != hash || (k = e.key) != key && (key == null || !key.equals(k))) {
                            ++binCount;
                            if ((e = e.next) == null) {
                                break label71;
                            }
                        }

                        old = e;
                    }
                }
            }

            if (old != null) {
                Object v;
                if (((HashMap.Node)old).value != null) {
                    int mc = this.modCount;
                    v = remappingFunction.apply(((HashMap.Node)old).value, value);
                    if (mc != this.modCount) {
                        throw new ConcurrentModificationException();
                    }
                } else {
                    v = value;
                }

                if (v != null) {
                    ((HashMap.Node)old).value = v;
                    this.afterNodeAccess((HashMap.Node)old);
                } else {
                    this.removeNode(hash, key, (Object)null, false, true);
                }

                return v;
            } else {
                if (t != null) {
                    t.putTreeVal(this, tab, hash, key, value);
                } else {
                    tab[i] = this.newNode(hash, key, value, first);
                    if (binCount >= 7) {
                        this.treeifyBin(tab, hash);
                    }
                }

                ++this.modCount;
                ++this.size;
                this.afterNodeInsertion(true);
                return value;
            }
        } else {
            throw new NullPointerException();
        }
    }

    public void forEach(BiConsumer<? super K, ? super V> action) {
        if (action == null) {
            throw new NullPointerException();
        } else {
            HashMap.Node[] tab;
            if (this.size > 0 && (tab = this.table) != null) {
                int mc = this.modCount;
                HashMap.Node[] var4 = tab;
                int var5 = tab.length;

                for(int var6 = 0; var6 < var5; ++var6) {
                    for(HashMap.Node e = var4[var6]; e != null; e = e.next) {
                        action.accept(e.key, e.value);
                    }
                }

                if (this.modCount != mc) {
                    throw new ConcurrentModificationException();
                }
            }

        }
    }

    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {
        if (function == null) {
            throw new NullPointerException();
        } else {
            HashMap.Node[] tab;
            if (this.size > 0 && (tab = this.table) != null) {
                int mc = this.modCount;
                HashMap.Node[] var4 = tab;
                int var5 = tab.length;

                for(int var6 = 0; var6 < var5; ++var6) {
                    for(HashMap.Node e = var4[var6]; e != null; e = e.next) {
                        e.value = function.apply(e.key, e.value);
                    }
                }

                if (this.modCount != mc) {
                    throw new ConcurrentModificationException();
                }
            }

        }
    }

    public Object clone() {
        HashMap result;
        try {
            result = (HashMap)super.clone();
        } catch (CloneNotSupportedException var3) {
            throw new InternalError(var3);
        }

        result.reinitialize();
        result.putMapEntries(this, false);
        return result;
    }

    final float loadFactor() {
        return this.loadFactor;
    }

    final int capacity() {
        return this.table != null ? this.table.length : (this.threshold > 0 ? this.threshold : 16);
    }

    private void writeObject(ObjectOutputStream s) throws IOException {
        int buckets = this.capacity();
        s.defaultWriteObject();
        s.writeInt(buckets);
        s.writeInt(this.size);
        this.internalWriteEntries(s);
    }

    private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
        s.defaultReadObject();
        this.reinitialize();
        if (!(this.loadFactor <= 0.0F) && !Float.isNaN(this.loadFactor)) {
            s.readInt();
            int mappings = s.readInt();
            if (mappings < 0) {
                throw new InvalidObjectException("Illegal mappings count: " + mappings);
            } else {
                if (mappings > 0) {
                    float lf = Math.min(Math.max(0.25F, this.loadFactor), 4.0F);
                    float fc = (float)mappings / lf + 1.0F;
                    int cap = fc < 16.0F ? 16 : (fc >= 1.07374182E9F ? 1073741824 : tableSizeFor((int)fc));
                    float ft = (float)cap * lf;
                    this.threshold = cap < 1073741824 && ft < 1.07374182E9F ? (int)ft : 2147483647;
                    SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Entry[].class, cap);
                    HashMap.Node<K, V>[] tab = new HashMap.Node[cap];
                    this.table = tab;

                    for(int i = 0; i < mappings; ++i) {
                        K key = s.readObject();
                        V value = s.readObject();
                        this.putVal(hash(key), key, value, false, false);
                    }
                }

            }
        } else {
            throw new InvalidObjectException("Illegal load factor: " + this.loadFactor);
        }
    }

    HashMap.Node<K, V> newNode(int hash, K key, V value, HashMap.Node<K, V> next) {
        return new HashMap.Node(hash, key, value, next);
    }

    HashMap.Node<K, V> replacementNode(HashMap.Node<K, V> p, HashMap.Node<K, V> next) {
        return new HashMap.Node(p.hash, p.key, p.value, next);
    }

    HashMap.TreeNode<K, V> newTreeNode(int hash, K key, V value, HashMap.Node<K, V> next) {
        return new HashMap.TreeNode(hash, key, value, next);
    }

    HashMap.TreeNode<K, V> replacementTreeNode(HashMap.Node<K, V> p, HashMap.Node<K, V> next) {
        return new HashMap.TreeNode(p.hash, p.key, p.value, next);
    }

    void reinitialize() {
        this.table = null;
        this.entrySet = null;
        this.keySet = null;
        this.values = null;
        this.modCount = 0;
        this.threshold = 0;
        this.size = 0;
    }

    void afterNodeAccess(HashMap.Node<K, V> p) {
    }

    void afterNodeInsertion(boolean evict) {
    }

    void afterNodeRemoval(HashMap.Node<K, V> p) {
    }

    void internalWriteEntries(ObjectOutputStream s) throws IOException {
        HashMap.Node[] tab;
        if (this.size > 0 && (tab = this.table) != null) {
            HashMap.Node[] var3 = tab;
            int var4 = tab.length;

            for(int var5 = 0; var5 < var4; ++var5) {
                for(HashMap.Node e = var3[var5]; e != null; e = e.next) {
                    s.writeObject(e.key);
                    s.writeObject(e.value);
                }
            }
        }

    }

    static class Node<K, V> implements Entry<K, V> {
        final int hash;
        final K key;
        V value;
        HashMap.Node<K, V> next;

        Node(int hash, K key, V value, HashMap.Node<K, V> next) {
            this.hash = hash;
            this.key = key;
            this.value = value;
            this.next = next;
        }

        public final K getKey() {
            return this.key;
        }

        public final V getValue() {
            return this.value;
        }

        public final String toString() {
            return this.key + "=" + this.value;
        }

        public final int hashCode() {
            return Objects.hashCode(this.key) ^ Objects.hashCode(this.value);
        }

        public final V setValue(V newValue) {
            V oldValue = this.value;
            this.value = newValue;
            return oldValue;
        }

        public final boolean equals(Object o) {
            if (o == this) {
                return true;
            } else {
                if (o instanceof Entry) {
                    Entry<?, ?> e = (Entry)o;
                    if (Objects.equals(this.key, e.getKey()) && Objects.equals(this.value, e.getValue())) {
                        return true;
                    }
                }

                return false;
            }
        }
    }

    static final class TreeNode<K, V> extends java.util.LinkedHashMap.Entry<K, V> {
        HashMap.TreeNode<K, V> parent;
        HashMap.TreeNode<K, V> left;
        HashMap.TreeNode<K, V> right;
        HashMap.TreeNode<K, V> prev;
        boolean red;

        TreeNode(int hash, K key, V val, HashMap.Node<K, V> next) {
            super(hash, key, val, next);
        }

        final HashMap.TreeNode<K, V> root() {
            HashMap.TreeNode r;
            HashMap.TreeNode p;
            for(r = this; (p = r.parent) != null; r = p) {
            }

            return r;
        }

        static <K, V> void moveRootToFront(HashMap.Node<K, V>[] tab, HashMap.TreeNode<K, V> root) {
            int n;
            if (root != null && tab != null && (n = tab.length) > 0) {
                int index = n - 1 & root.hash;
                HashMap.TreeNode<K, V> first = (HashMap.TreeNode)tab[index];
                if (root != first) {
                    tab[index] = root;
                    HashMap.TreeNode<K, V> rp = root.prev;
                    HashMap.Node rn;
                    if ((rn = root.next) != null) {
                        ((HashMap.TreeNode)rn).prev = rp;
                    }

                    if (rp != null) {
                        rp.next = rn;
                    }

                    if (first != null) {
                        first.prev = root;
                    }

                    root.next = first;
                    root.prev = null;
                }

                assert checkInvariants(root);
            }

        }

        final HashMap.TreeNode<K, V> find(int h, Object k, Class<?> kc) {
            HashMap.TreeNode p = this;

            do {
                HashMap.TreeNode<K, V> pl = p.left;
                HashMap.TreeNode<K, V> pr = p.right;
                int ph;
                if ((ph = p.hash) > h) {
                    p = pl;
                } else if (ph < h) {
                    p = pr;
                } else {
                    Object pk;
                    if ((pk = p.key) == k || k != null && k.equals(pk)) {
                        return p;
                    }

                    if (pl == null) {
                        p = pr;
                    } else if (pr == null) {
                        p = pl;
                    } else {
                        int dir;
                        if ((kc != null || (kc = HashMap.comparableClassFor(k)) != null) && (dir = HashMap.compareComparables(kc, k, pk)) != 0) {
                            p = dir < 0 ? pl : pr;
                        } else {
                            HashMap.TreeNode q;
                            if ((q = pr.find(h, k, kc)) != null) {
                                return q;
                            }

                            p = pl;
                        }
                    }
                }
            } while(p != null);

            return null;
        }

        final HashMap.TreeNode<K, V> getTreeNode(int h, Object k) {
            return (this.parent != null ? this.root() : this).find(h, k, (Class)null);
        }

        static int tieBreakOrder(Object a, Object b) {
            int d;
            if (a == null || b == null || (d = a.getClass().getName().compareTo(b.getClass().getName())) == 0) {
                d = System.identityHashCode(a) <= System.identityHashCode(b) ? -1 : 1;
            }

            return d;
        }

        final void treeify(HashMap.Node<K, V>[] tab) {
            HashMap.TreeNode<K, V> root = null;

            HashMap.TreeNode next;
            for(HashMap.TreeNode x = this; x != null; x = next) {
                next = (HashMap.TreeNode)x.next;
                x.left = x.right = null;
                if (root == null) {
                    x.parent = null;
                    x.red = false;
                    root = x;
                } else {
                    K k = x.key;
                    int h = x.hash;
                    Class<?> kc = null;
                    HashMap.TreeNode p = root;

                    int dir;
                    HashMap.TreeNode xp;
                    do {
                        K pk = p.key;
                        int ph;
                        if ((ph = p.hash) > h) {
                            dir = -1;
                        } else if (ph < h) {
                            dir = 1;
                        } else if (kc == null && (kc = HashMap.comparableClassFor(k)) == null || (dir = HashMap.compareComparables(kc, k, pk)) == 0) {
                            dir = tieBreakOrder(k, pk);
                        }

                        xp = p;
                    } while((p = dir <= 0 ? p.left : p.right) != null);

                    x.parent = xp;
                    if (dir <= 0) {
                        xp.left = x;
                    } else {
                        xp.right = x;
                    }

                    root = balanceInsertion(root, x);
                }
            }

            moveRootToFront(tab, root);
        }

        final HashMap.Node<K, V> untreeify(HashMap<K, V> map) {
            HashMap.Node<K, V> hd = null;
            HashMap.Node<K, V> tl = null;

            for(Object q = this; q != null; q = ((HashMap.Node)q).next) {
                HashMap.Node<K, V> p = map.replacementNode((HashMap.Node)q, (HashMap.Node)null);
                if (tl == null) {
                    hd = p;
                } else {
                    tl.next = p;
                }

                tl = p;
            }

            return hd;
        }

        final HashMap.TreeNode<K, V> putTreeVal(HashMap<K, V> map, HashMap.Node<K, V>[] tab, int h, K k, V v) {
            Class<?> kc = null;
            boolean searched = false;
            HashMap.TreeNode<K, V> root = this.parent != null ? this.root() : this;
            HashMap.TreeNode p = root;

            int dir;
            HashMap.TreeNode q;
            do {
                int ph;
                if ((ph = p.hash) > h) {
                    dir = -1;
                } else if (ph < h) {
                    dir = 1;
                } else {
                    Object pk;
                    if ((pk = p.key) == k || k != null && k.equals(pk)) {
                        return p;
                    }

                    if (kc == null && (kc = HashMap.comparableClassFor(k)) == null || (dir = HashMap.compareComparables(kc, k, pk)) == 0) {
                        if (!searched) {
                            searched = true;
                            HashMap.TreeNode ch;
                            if ((ch = p.left) != null && (q = ch.find(h, k, kc)) != null || (ch = p.right) != null && (q = ch.find(h, k, kc)) != null) {
                                return q;
                            }
                        }

                        dir = tieBreakOrder(k, pk);
                    }
                }

                q = p;
            } while((p = dir <= 0 ? p.left : p.right) != null);

            HashMap.Node<K, V> xpn = q.next;
            HashMap.TreeNode<K, V> x = map.newTreeNode(h, k, v, xpn);
            if (dir <= 0) {
                q.left = x;
            } else {
                q.right = x;
            }

            q.next = x;
            x.parent = x.prev = q;
            if (xpn != null) {
                ((HashMap.TreeNode)xpn).prev = x;
            }

            moveRootToFront(tab, balanceInsertion(root, x));
            return null;
        }

        final void removeTreeNode(HashMap<K, V> map, HashMap.Node<K, V>[] tab, boolean movable) {
            int n;
            if (tab != null && (n = tab.length) != 0) {
                int index = n - 1 & this.hash;
                HashMap.TreeNode<K, V> first = (HashMap.TreeNode)tab[index];
                HashMap.TreeNode<K, V> root = first;
                HashMap.TreeNode<K, V> succ = (HashMap.TreeNode)this.next;
                HashMap.TreeNode<K, V> pred = this.prev;
                if (pred == null) {
                    first = succ;
                    tab[index] = succ;
                } else {
                    pred.next = succ;
                }

                if (succ != null) {
                    succ.prev = pred;
                }

                if (first != null) {
                    if (root.parent != null) {
                        root = root.root();
                    }

                    HashMap.TreeNode rl;
                    if (root != null && (!movable || root.right != null && (rl = root.left) != null && rl.left != null)) {
                        HashMap.TreeNode<K, V> pl = this.left;
                        HashMap.TreeNode<K, V> pr = this.right;
                        HashMap.TreeNode replacement;
                        HashMap.TreeNode s;
                        HashMap.TreeNode pp;
                        if (pl != null && pr != null) {
                            for(s = pr; (pp = s.left) != null; s = pp) {
                            }

                            boolean c = s.red;
                            s.red = this.red;
                            this.red = c;
                            HashMap.TreeNode<K, V> sr = s.right;
                            HashMap.TreeNode<K, V> pp = this.parent;
                            if (s == pr) {
                                this.parent = s;
                                s.right = this;
                            } else {
                                HashMap.TreeNode<K, V> sp = s.parent;
                                if ((this.parent = sp) != null) {
                                    if (s == sp.left) {
                                        sp.left = this;
                                    } else {
                                        sp.right = this;
                                    }
                                }

                                if ((s.right = pr) != null) {
                                    pr.parent = s;
                                }
                            }

                            this.left = null;
                            if ((this.right = sr) != null) {
                                sr.parent = this;
                            }

                            if ((s.left = pl) != null) {
                                pl.parent = s;
                            }

                            if ((s.parent = pp) == null) {
                                root = s;
                            } else if (this == pp.left) {
                                pp.left = s;
                            } else {
                                pp.right = s;
                            }

                            if (sr != null) {
                                replacement = sr;
                            } else {
                                replacement = this;
                            }
                        } else if (pl != null) {
                            replacement = pl;
                        } else if (pr != null) {
                            replacement = pr;
                        } else {
                            replacement = this;
                        }

                        if (replacement != this) {
                            s = replacement.parent = this.parent;
                            if (s == null) {
                                root = replacement;
                                replacement.red = false;
                            } else if (this == s.left) {
                                s.left = replacement;
                            } else {
                                s.right = replacement;
                            }

                            this.left = this.right = this.parent = null;
                        }

                        s = this.red ? root : balanceDeletion(root, replacement);
                        if (replacement == this) {
                            pp = this.parent;
                            this.parent = null;
                            if (pp != null) {
                                if (this == pp.left) {
                                    pp.left = null;
                                } else if (this == pp.right) {
                                    pp.right = null;
                                }
                            }
                        }

                        if (movable) {
                            moveRootToFront(tab, s);
                        }

                    } else {
                        tab[index] = first.untreeify(map);
                    }
                }
            }
        }

        final void split(HashMap<K, V> map, HashMap.Node<K, V>[] tab, int index, int bit) {
            HashMap.TreeNode<K, V> loHead = null;
            HashMap.TreeNode<K, V> loTail = null;
            HashMap.TreeNode<K, V> hiHead = null;
            HashMap.TreeNode<K, V> hiTail = null;
            int lc = 0;
            int hc = 0;

            HashMap.TreeNode next;
            for(HashMap.TreeNode e = this; e != null; e = next) {
                next = (HashMap.TreeNode)e.next;
                e.next = null;
                if ((e.hash & bit) == 0) {
                    if ((e.prev = loTail) == null) {
                        loHead = e;
                    } else {
                        loTail.next = e;
                    }

                    loTail = e;
                    ++lc;
                } else {
                    if ((e.prev = hiTail) == null) {
                        hiHead = e;
                    } else {
                        hiTail.next = e;
                    }

                    hiTail = e;
                    ++hc;
                }
            }

            if (loHead != null) {
                if (lc <= 6) {
                    tab[index] = loHead.untreeify(map);
                } else {
                    tab[index] = loHead;
                    if (hiHead != null) {
                        loHead.treeify(tab);
                    }
                }
            }

            if (hiHead != null) {
                if (hc <= 6) {
                    tab[index + bit] = hiHead.untreeify(map);
                } else {
                    tab[index + bit] = hiHead;
                    if (loHead != null) {
                        hiHead.treeify(tab);
                    }
                }
            }

        }

        static <K, V> HashMap.TreeNode<K, V> rotateLeft(HashMap.TreeNode<K, V> root, HashMap.TreeNode<K, V> p) {
            HashMap.TreeNode r;
            if (p != null && (r = p.right) != null) {
                HashMap.TreeNode rl;
                if ((rl = p.right = r.left) != null) {
                    rl.parent = p;
                }

                HashMap.TreeNode pp;
                if ((pp = r.parent = p.parent) == null) {
                    root = r;
                    r.red = false;
                } else if (pp.left == p) {
                    pp.left = r;
                } else {
                    pp.right = r;
                }

                r.left = p;
                p.parent = r;
            }

            return root;
        }

        static <K, V> HashMap.TreeNode<K, V> rotateRight(HashMap.TreeNode<K, V> root, HashMap.TreeNode<K, V> p) {
            HashMap.TreeNode l;
            if (p != null && (l = p.left) != null) {
                HashMap.TreeNode lr;
                if ((lr = p.left = l.right) != null) {
                    lr.parent = p;
                }

                HashMap.TreeNode pp;
                if ((pp = l.parent = p.parent) == null) {
                    root = l;
                    l.red = false;
                } else if (pp.right == p) {
                    pp.right = l;
                } else {
                    pp.left = l;
                }

                l.right = p;
                p.parent = l;
            }

            return root;
        }

        static <K, V> HashMap.TreeNode<K, V> balanceInsertion(HashMap.TreeNode<K, V> root, HashMap.TreeNode<K, V> x) {
            x.red = true;

            HashMap.TreeNode xp;
            while((xp = x.parent) != null) {
                HashMap.TreeNode xpp;
                if (!xp.red || (xpp = xp.parent) == null) {
                    return root;
                }

                HashMap.TreeNode xppl;
                if (xp == (xppl = xpp.left)) {
                    HashMap.TreeNode xppr;
                    if ((xppr = xpp.right) != null && xppr.red) {
                        xppr.red = false;
                        xp.red = false;
                        xpp.red = true;
                        x = xpp;
                    } else {
                        if (x == xp.right) {
                            x = xp;
                            root = rotateLeft(root, xp);
                            xpp = (xp = xp.parent) == null ? null : xp.parent;
                        }

                        if (xp != null) {
                            xp.red = false;
                            if (xpp != null) {
                                xpp.red = true;
                                root = rotateRight(root, xpp);
                            }
                        }
                    }
                } else if (xppl != null && xppl.red) {
                    xppl.red = false;
                    xp.red = false;
                    xpp.red = true;
                    x = xpp;
                } else {
                    if (x == xp.left) {
                        x = xp;
                        root = rotateRight(root, xp);
                        xpp = (xp = xp.parent) == null ? null : xp.parent;
                    }

                    if (xp != null) {
                        xp.red = false;
                        if (xpp != null) {
                            xpp.red = true;
                            root = rotateLeft(root, xpp);
                        }
                    }
                }
            }

            x.red = false;
            return x;
        }

        static <K, V> HashMap.TreeNode<K, V> balanceDeletion(HashMap.TreeNode<K, V> root, HashMap.TreeNode<K, V> x) {
            while(x != null && x != root) {
                HashMap.TreeNode xp;
                if ((xp = x.parent) == null) {
                    x.red = false;
                    return x;
                }

                if (x.red) {
                    x.red = false;
                    return root;
                }

                HashMap.TreeNode xpl;
                HashMap.TreeNode sl;
                HashMap.TreeNode sr;
                if ((xpl = xp.left) == x) {
                    HashMap.TreeNode xpr;
                    if ((xpr = xp.right) != null && xpr.red) {
                        xpr.red = false;
                        xp.red = true;
                        root = rotateLeft(root, xp);
                        xpr = (xp = x.parent) == null ? null : xp.right;
                    }

                    if (xpr == null) {
                        x = xp;
                    } else {
                        sl = xpr.left;
                        sr = xpr.right;
                        if (sr != null && sr.red || sl != null && sl.red) {
                            if (sr == null || !sr.red) {
                                if (sl != null) {
                                    sl.red = false;
                                }

                                xpr.red = true;
                                root = rotateRight(root, xpr);
                                xpr = (xp = x.parent) == null ? null : xp.right;
                            }

                            if (xpr != null) {
                                xpr.red = xp == null ? false : xp.red;
                                if ((sr = xpr.right) != null) {
                                    sr.red = false;
                                }
                            }

                            if (xp != null) {
                                xp.red = false;
                                root = rotateLeft(root, xp);
                            }

                            x = root;
                        } else {
                            xpr.red = true;
                            x = xp;
                        }
                    }
                } else {
                    if (xpl != null && xpl.red) {
                        xpl.red = false;
                        xp.red = true;
                        root = rotateRight(root, xp);
                        xpl = (xp = x.parent) == null ? null : xp.left;
                    }

                    if (xpl == null) {
                        x = xp;
                    } else {
                        sl = xpl.left;
                        sr = xpl.right;
                        if ((sl == null || !sl.red) && (sr == null || !sr.red)) {
                            xpl.red = true;
                            x = xp;
                        } else {
                            if (sl == null || !sl.red) {
                                if (sr != null) {
                                    sr.red = false;
                                }

                                xpl.red = true;
                                root = rotateLeft(root, xpl);
                                xpl = (xp = x.parent) == null ? null : xp.left;
                            }

                            if (xpl != null) {
                                xpl.red = xp == null ? false : xp.red;
                                if ((sl = xpl.left) != null) {
                                    sl.red = false;
                                }
                            }

                            if (xp != null) {
                                xp.red = false;
                                root = rotateRight(root, xp);
                            }

                            x = root;
                        }
                    }
                }
            }

            return root;
        }

        static <K, V> boolean checkInvariants(HashMap.TreeNode<K, V> t) {
            HashMap.TreeNode<K, V> tp = t.parent;
            HashMap.TreeNode<K, V> tl = t.left;
            HashMap.TreeNode<K, V> tr = t.right;
            HashMap.TreeNode<K, V> tb = t.prev;
            HashMap.TreeNode<K, V> tn = (HashMap.TreeNode)t.next;
            if (tb != null && tb.next != t) {
                return false;
            } else if (tn != null && tn.prev != t) {
                return false;
            } else if (tp != null && t != tp.left && t != tp.right) {
                return false;
            } else if (tl != null && (tl.parent != t || tl.hash > t.hash)) {
                return false;
            } else if (tr == null || tr.parent == t && tr.hash >= t.hash) {
                if (t.red && tl != null && tl.red && tr != null && tr.red) {
                    return false;
                } else if (tl != null && !checkInvariants(tl)) {
                    return false;
                } else {
                    return tr == null || checkInvariants(tr);
                }
            } else {
                return false;
            }
        }
    }

    final class KeySet extends AbstractSet<K> {
        KeySet() {
        }

        public final int size() {
            return HashMap.this.size;
        }

        public final void clear() {
            HashMap.this.clear();
        }

        public final Iterator<K> iterator() {
            return HashMap.this.new KeyIterator();
        }

        public final boolean contains(Object o) {
            return HashMap.this.containsKey(o);
        }

        public final boolean remove(Object key) {
            return HashMap.this.removeNode(HashMap.hash(key), key, (Object)null, false, true) != null;
        }

        public final Spliterator<K> spliterator() {
            return new HashMap.KeySpliterator(HashMap.this, 0, -1, 0, 0);
        }

        public Object[] toArray() {
            return HashMap.this.keysToArray(new Object[HashMap.this.size]);
        }

        public <T> T[] toArray(T[] a) {
            return HashMap.this.keysToArray(HashMap.this.prepareArray(a));
        }

        public final void forEach(Consumer<? super K> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap.Node[] tab;
                if (HashMap.this.size > 0 && (tab = HashMap.this.table) != null) {
                    int mc = HashMap.this.modCount;
                    HashMap.Node[] var4 = tab;
                    int var5 = tab.length;

                    for(int var6 = 0; var6 < var5; ++var6) {
                        for(HashMap.Node e = var4[var6]; e != null; e = e.next) {
                            action.accept(e.key);
                        }
                    }

                    if (HashMap.this.modCount != mc) {
                        throw new ConcurrentModificationException();
                    }
                }

            }
        }
    }

    final class Values extends AbstractCollection<V> {
        Values() {
        }

        public final int size() {
            return HashMap.this.size;
        }

        public final void clear() {
            HashMap.this.clear();
        }

        public final Iterator<V> iterator() {
            return HashMap.this.new ValueIterator();
        }

        public final boolean contains(Object o) {
            return HashMap.this.containsValue(o);
        }

        public final Spliterator<V> spliterator() {
            return new HashMap.ValueSpliterator(HashMap.this, 0, -1, 0, 0);
        }

        public Object[] toArray() {
            return HashMap.this.valuesToArray(new Object[HashMap.this.size]);
        }

        public <T> T[] toArray(T[] a) {
            return HashMap.this.valuesToArray(HashMap.this.prepareArray(a));
        }

        public final void forEach(Consumer<? super V> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap.Node[] tab;
                if (HashMap.this.size > 0 && (tab = HashMap.this.table) != null) {
                    int mc = HashMap.this.modCount;
                    HashMap.Node[] var4 = tab;
                    int var5 = tab.length;

                    for(int var6 = 0; var6 < var5; ++var6) {
                        for(HashMap.Node e = var4[var6]; e != null; e = e.next) {
                            action.accept(e.value);
                        }
                    }

                    if (HashMap.this.modCount != mc) {
                        throw new ConcurrentModificationException();
                    }
                }

            }
        }
    }

    final class EntrySet extends AbstractSet<Entry<K, V>> {
        EntrySet() {
        }

        public final int size() {
            return HashMap.this.size;
        }

        public final void clear() {
            HashMap.this.clear();
        }

        public final Iterator<Entry<K, V>> iterator() {
            return HashMap.this.new EntryIterator();
        }

        public final boolean contains(Object o) {
            if (!(o instanceof Entry)) {
                return false;
            } else {
                Entry<?, ?> e = (Entry)o;
                Object key = e.getKey();
                HashMap.Node<K, V> candidate = HashMap.this.getNode(key);
                return candidate != null && candidate.equals(e);
            }
        }

        public final boolean remove(Object o) {
            if (o instanceof Entry) {
                Entry<?, ?> e = (Entry)o;
                Object key = e.getKey();
                Object value = e.getValue();
                return HashMap.this.removeNode(HashMap.hash(key), key, value, true, true) != null;
            } else {
                return false;
            }
        }

        public final Spliterator<Entry<K, V>> spliterator() {
            return new HashMap.EntrySpliterator(HashMap.this, 0, -1, 0, 0);
        }

        public final void forEach(Consumer<? super Entry<K, V>> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap.Node[] tab;
                if (HashMap.this.size > 0 && (tab = HashMap.this.table) != null) {
                    int mc = HashMap.this.modCount;
                    HashMap.Node[] var4 = tab;
                    int var5 = tab.length;

                    for(int var6 = 0; var6 < var5; ++var6) {
                        for(HashMap.Node e = var4[var6]; e != null; e = e.next) {
                            action.accept(e);
                        }
                    }

                    if (HashMap.this.modCount != mc) {
                        throw new ConcurrentModificationException();
                    }
                }

            }
        }
    }

    static final class EntrySpliterator<K, V> extends HashMap.HashMapSpliterator<K, V> implements Spliterator<Entry<K, V>> {
        EntrySpliterator(HashMap<K, V> m, int origin, int fence, int est, int expectedModCount) {
            super(m, origin, fence, est, expectedModCount);
        }

        public HashMap.EntrySpliterator<K, V> trySplit() {
            int hi = this.getFence();
            int lo = this.index;
            int mid = lo + hi >>> 1;
            return lo < mid && this.current == null ? new HashMap.EntrySpliterator(this.map, lo, this.index = mid, this.est >>>= 1, this.expectedModCount) : null;
        }

        public void forEachRemaining(Consumer<? super Entry<K, V>> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap<K, V> m = this.map;
                HashMap.Node<K, V>[] tab = m.table;
                int hi;
                int mc;
                if ((hi = this.fence) < 0) {
                    mc = this.expectedModCount = m.modCount;
                    hi = this.fence = tab == null ? 0 : tab.length;
                } else {
                    mc = this.expectedModCount;
                }

                int i;
                if (tab != null && tab.length >= hi && (i = this.index) >= 0 && (i < (this.index = hi) || this.current != null)) {
                    HashMap.Node<K, V> p = this.current;
                    this.current = null;

                    do {
                        do {
                            if (p == null) {
                                p = tab[i++];
                            } else {
                                action.accept(p);
                                p = p.next;
                            }
                        } while(p != null);
                    } while(i < hi);

                    if (m.modCount != mc) {
                        throw new ConcurrentModificationException();
                    }
                }

            }
        }

        public boolean tryAdvance(Consumer<? super Entry<K, V>> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap.Node<K, V>[] tab = this.map.table;
                int hi;
                if (tab != null && tab.length >= (hi = this.getFence()) && this.index >= 0) {
                    while(this.current != null || this.index < hi) {
                        if (this.current != null) {
                            HashMap.Node<K, V> e = this.current;
                            this.current = this.current.next;
                            action.accept(e);
                            if (this.map.modCount != this.expectedModCount) {
                                throw new ConcurrentModificationException();
                            }

                            return true;
                        }

                        this.current = tab[this.index++];
                    }
                }

                return false;
            }
        }

        public int characteristics() {
            return (this.fence >= 0 && this.est != this.map.size ? 0 : 64) | 1;
        }
    }

    static final class ValueSpliterator<K, V> extends HashMap.HashMapSpliterator<K, V> implements Spliterator<V> {
        ValueSpliterator(HashMap<K, V> m, int origin, int fence, int est, int expectedModCount) {
            super(m, origin, fence, est, expectedModCount);
        }

        public HashMap.ValueSpliterator<K, V> trySplit() {
            int hi = this.getFence();
            int lo = this.index;
            int mid = lo + hi >>> 1;
            return lo < mid && this.current == null ? new HashMap.ValueSpliterator(this.map, lo, this.index = mid, this.est >>>= 1, this.expectedModCount) : null;
        }

        public void forEachRemaining(Consumer<? super V> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap<K, V> m = this.map;
                HashMap.Node<K, V>[] tab = m.table;
                int hi;
                int mc;
                if ((hi = this.fence) < 0) {
                    mc = this.expectedModCount = m.modCount;
                    hi = this.fence = tab == null ? 0 : tab.length;
                } else {
                    mc = this.expectedModCount;
                }

                int i;
                if (tab != null && tab.length >= hi && (i = this.index) >= 0 && (i < (this.index = hi) || this.current != null)) {
                    HashMap.Node<K, V> p = this.current;
                    this.current = null;

                    do {
                        do {
                            if (p == null) {
                                p = tab[i++];
                            } else {
                                action.accept(p.value);
                                p = p.next;
                            }
                        } while(p != null);
                    } while(i < hi);

                    if (m.modCount != mc) {
                        throw new ConcurrentModificationException();
                    }
                }

            }
        }

        public boolean tryAdvance(Consumer<? super V> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap.Node<K, V>[] tab = this.map.table;
                int hi;
                if (tab != null && tab.length >= (hi = this.getFence()) && this.index >= 0) {
                    while(this.current != null || this.index < hi) {
                        if (this.current != null) {
                            V v = this.current.value;
                            this.current = this.current.next;
                            action.accept(v);
                            if (this.map.modCount != this.expectedModCount) {
                                throw new ConcurrentModificationException();
                            }

                            return true;
                        }

                        this.current = tab[this.index++];
                    }
                }

                return false;
            }
        }

        public int characteristics() {
            return this.fence >= 0 && this.est != this.map.size ? 0 : 64;
        }
    }

    static final class KeySpliterator<K, V> extends HashMap.HashMapSpliterator<K, V> implements Spliterator<K> {
        KeySpliterator(HashMap<K, V> m, int origin, int fence, int est, int expectedModCount) {
            super(m, origin, fence, est, expectedModCount);
        }

        public HashMap.KeySpliterator<K, V> trySplit() {
            int hi = this.getFence();
            int lo = this.index;
            int mid = lo + hi >>> 1;
            return lo < mid && this.current == null ? new HashMap.KeySpliterator(this.map, lo, this.index = mid, this.est >>>= 1, this.expectedModCount) : null;
        }

        public void forEachRemaining(Consumer<? super K> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap<K, V> m = this.map;
                HashMap.Node<K, V>[] tab = m.table;
                int hi;
                int mc;
                if ((hi = this.fence) < 0) {
                    mc = this.expectedModCount = m.modCount;
                    hi = this.fence = tab == null ? 0 : tab.length;
                } else {
                    mc = this.expectedModCount;
                }

                int i;
                if (tab != null && tab.length >= hi && (i = this.index) >= 0 && (i < (this.index = hi) || this.current != null)) {
                    HashMap.Node<K, V> p = this.current;
                    this.current = null;

                    do {
                        do {
                            if (p == null) {
                                p = tab[i++];
                            } else {
                                action.accept(p.key);
                                p = p.next;
                            }
                        } while(p != null);
                    } while(i < hi);

                    if (m.modCount != mc) {
                        throw new ConcurrentModificationException();
                    }
                }

            }
        }

        public boolean tryAdvance(Consumer<? super K> action) {
            if (action == null) {
                throw new NullPointerException();
            } else {
                HashMap.Node<K, V>[] tab = this.map.table;
                int hi;
                if (tab != null && tab.length >= (hi = this.getFence()) && this.index >= 0) {
                    while(this.current != null || this.index < hi) {
                        if (this.current != null) {
                            K k = this.current.key;
                            this.current = this.current.next;
                            action.accept(k);
                            if (this.map.modCount != this.expectedModCount) {
                                throw new ConcurrentModificationException();
                            }

                            return true;
                        }

                        this.current = tab[this.index++];
                    }
                }

                return false;
            }
        }

        public int characteristics() {
            return (this.fence >= 0 && this.est != this.map.size ? 0 : 64) | 1;
        }
    }

    static class HashMapSpliterator<K, V> {
        final HashMap<K, V> map;
        HashMap.Node<K, V> current;
        int index;
        int fence;
        int est;
        int expectedModCount;

        HashMapSpliterator(HashMap<K, V> m, int origin, int fence, int est, int expectedModCount) {
            this.map = m;
            this.index = origin;
            this.fence = fence;
            this.est = est;
            this.expectedModCount = expectedModCount;
        }

        final int getFence() {
            int hi;
            if ((hi = this.fence) < 0) {
                HashMap<K, V> m = this.map;
                this.est = m.size;
                this.expectedModCount = m.modCount;
                HashMap.Node<K, V>[] tab = m.table;
                hi = this.fence = tab == null ? 0 : tab.length;
            }

            return hi;
        }

        public final long estimateSize() {
            this.getFence();
            return (long)this.est;
        }
    }

    final class EntryIterator extends HashMap<K, V>.HashIterator implements Iterator<Entry<K, V>> {
        EntryIterator() {
            super();
        }

        public final Entry<K, V> next() {
            return this.nextNode();
        }
    }

    final class ValueIterator extends HashMap<K, V>.HashIterator implements Iterator<V> {
        ValueIterator() {
            super();
        }

        public final V next() {
            return this.nextNode().value;
        }
    }

    final class KeyIterator extends HashMap<K, V>.HashIterator implements Iterator<K> {
        KeyIterator() {
            super();
        }

        public final K next() {
            return this.nextNode().key;
        }
    }

    abstract class HashIterator {
        HashMap.Node<K, V> next;
        HashMap.Node<K, V> current;
        int expectedModCount;
        int index;

        HashIterator() {
            this.expectedModCount = HashMap.this.modCount;
            HashMap.Node<K, V>[] t = HashMap.this.table;
            this.current = this.next = null;
            this.index = 0;
            if (t != null && HashMap.this.size > 0) {
                while(this.index < t.length && (this.next = t[this.index++]) == null) {
                }
            }

        }

        public final boolean hasNext() {
            return this.next != null;
        }

        final HashMap.Node<K, V> nextNode() {
            HashMap.Node<K, V> e = this.next;
            if (HashMap.this.modCount != this.expectedModCount) {
                throw new ConcurrentModificationException();
            } else if (e == null) {
                throw new NoSuchElementException();
            } else {
                HashMap.Node[] t;
                if ((this.next = (this.current = e).next) == null && (t = HashMap.this.table) != null) {
                    while(this.index < t.length && (this.next = t[this.index++]) == null) {
                    }
                }

                return e;
            }
        }

        public final void remove() {
            HashMap.Node<K, V> p = this.current;
            if (p == null) {
                throw new IllegalStateException();
            } else if (HashMap.this.modCount != this.expectedModCount) {
                throw new ConcurrentModificationException();
            } else {
                this.current = null;
                HashMap.this.removeNode(p.hash, p.key, (Object)null, false, false);
                this.expectedModCount = HashMap.this.modCount;
            }
        }
    }
}
